% ------------------------------------------------------------------------------
% ------------------------------------------------------------------------------
% ------------------------------------------------------------------------------
% Lists predicates
% Auteur:
% Date: 2012-09-16
% ------------------------------------------------------------------------------
% ------------------------------------------------------------------------------
% ------------------------------------------------------------------------------

:- module(list, [filter/2, conc/3]).

% ------------------------------------------------------------------------------
% remove duplicata
filter([],[]).
filter([H|T], C) :- member(H,T), !, filter(T,C).
filter([H|T], [H|C]) :- filter(T,C).

% ------------------------------------------------------------------------------
% replace X by Y from L in Result
replace([], _, _, []).
replace([X|T], X, Y, [Y|Result]) :- replace(T, X, Y, Result), !.
replace([H|T], X, Y, [H|Result]) :- replace(T, X, Y, Result).

% ------------------------------------------------------------------------------
% concatenation of L3 = L1 + L2
conc([], L, L).
conc([X|L1], L2, [X|L3]) :- conc(L1, L2, L3).

% ------------------------------------------------------------------------------
% Compatibility predicates
%member(X, L) - checks if X is a member of a List
%member(X, [X|_]).
%member(X, [_|R]):-
% member(X, R).
%member(X, L) :- conc(_, [X|_], L).

% ------------------------------------------------------------------------------
% add item X to list L
%add(X, L, [X|L]).

% ------------------------------------------------------------------------------
% remove X from list resulting in T
%remove(X, L, L) :- \+member(X, L). % ignore if X is not a member of L
%remove(X, [X|T], T).
%remove(X, [H|T], [H|R]) :- remove(X, T, R).

% ------------------------------------------------------------------------------
% ------------------------------------------------------------------------------
% Unit tests
% ------------------------------------------------------------------------------
% ------------------------------------------------------------------------------

:- begin_tests(list).

test(filter) :- filter([a, b, c, a], L), L = [b, c, a], !.
test(replace) :- replace([a], a, b, L), L = [b], !.

:- end_tests(list).
:- run_tests(list).
