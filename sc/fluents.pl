% ------------------------------------------------------------------------------
% ------------------------------------------------------------------------------
% ------------------------------------------------------------------------------
% HOLDS: true if [fluents] are all true in situation S.
% Auteur: rv
% Date: 2013-03-31
% ------------------------------------------------------------------------------
% ------------------------------------------------------------------------------
% ------------------------------------------------------------------------------

:- module(fluents, [holds/2]).
:- multifile holds/2.

% ------------------------------------------------------------------------------
% empty situation
holds([], _).

% ------------------------------------------------------------------------------
% fluents as formulas
holds([H|T], S) :-
 functor(H, Fun, 2),
 (Fun = \== ; Fun = == ; Fun = > ; Fun = < ; Fun = =< ; Fun = >= ; Fun = =:= ; Fun = =\=),
 call(H),
 holds(T, S).

% ------------------------------------------------------------------------------
% negation of fluents
holds([H|T], S) :-
 functor(H, not, 1),
 arg(1, H, Fluent),
 \+member(Fluent, S),
 holds(T, S).

% ------------------------------------------------------------------------------
% fluents as facts
holds([H|T], S) :-
 member(H, S),
 debug(holds, "fluents: ~w~n", [H]),
 holds(T, S).

% ------------------------------------------------------------------------------
% ------------------------------------------------------------------------------
% Unit tests
% ------------------------------------------------------------------------------
% ------------------------------------------------------------------------------

:- begin_tests(holds).

test(facts) :- S = [a, b, c], holds([a, b, c], S), !.
test(values) :- S = [a(10)], holds([a(X), X > 1, X < 20, X == 10, X \== 10.0, X \== 20, X =:= 10.0, X =\= 20.0], S)X, !.
test(formulas) :- S = [a(1), b(2), c(1)], holds([a(X), b(Y), c(Z), X \== Y, X == Z], S), !.
test(negation) :- S = [b, c], holds([not(a)], S), \+holds([not(b)], S), !.

:- end_tests(holds).
:- run_tests(holds).
